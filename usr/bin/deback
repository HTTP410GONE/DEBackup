#!/bin/bash
# This script is created by HTTP410GONE.
# Twitter: @hypertexterr410
# Copyright (C) HTTP410GONE.
touch /System/Library/deback_permission_test
function trap_forceExit ()
{
    echo "Force quit signal detected."
    echo "Cleaning up..."
    if [ -e $ProgressFile ]; then
        rm $ProgressFile
    fi
    exit 
}
trap "trap_forceExit" 2
clear
DEBUG="Release "
VER=$(</lib410/VersionStore/vers_debackup)
echo " _   _  _                "               
echo "| \ |_ |_)  _.  _ |      ._   "
echo "|_/ |_ |_) (_| (_ |< |_| |_)  "
echo "                         |   "
echo "======================================"
echo "Version:" $DEBUG$VER
echo "Tool Created: HTTP410GONE"
echo "Tool Published: NVTechnology Korea"
echo "======================================"
echo "System Start..."
echo "Checking permission..."
if [ ! -e /System/Library/deback_permission_test ]; then
    echo "DEBackup is not running as superuser permission. Unable to continue."
    exit
else
    echo "Permission check pass!"
    rm /System/Library/deback_permission_test
fi
echo "Checking Library..."
if [ ! -e /private/var/mobile/Documents/debackup.lib ]; then
    echo "DEBackup Master Library not found. Making one..."
    mkdir /private/var/mobile/Documents/debackup.lib
    echo "Making child libraries..."
    mkdir /private/var/mobile/Documents/debackup.lib/Permanent
    mkdir /private/var/mobile/Documents/debackup.lib/temp
    echo "Done."
elif [ ! -e /private/var/mobile/Documents/debackup.lib/temp ]; then
    echo "DEBackup Temporary Directory not found. Making one..." 
    mkdir /private/var/mobile/Documents/debackup.lib/temp
    echo "Done."
elif [ ! -e /private/var/mobile/Documents/debackup.lib/Permanent ]; then
    echo "DEBackup Permanent Storage not found. Making one..."
    mkdir /private/var/mobile/Documents/debackup.lib/Permanent
    echo "Done."
fi
BINDIR="/lib410/Resources/debackup/"
PREFDIR="/lib410/Preferences/pref_debackup_option_"
ProgressFile="/private/var/mobile/Documents/debackup.lib/inProgress"
echo "Checking for any crash..."
if [ -e $ProgressFile ]; then
    RECORD=$(<$ProgressFile)
    echo "CRASH RECORD FOUND."
    echo "DATA: "
    echo $RECORD
    rm $ProgressFile
    echo "Crash data erased. Just in case, please restart the tool."
    echo "======================================"
    exit
else
    echo "No crash record from last process."
fi
echo "Loading policies..."
backupdeb=$(<$PREFDIR"debianBackup")
backuppref=$(<$PREFDIR"prefBackup")
backupmaster=$(<$PREFDIR"masterBackup")
restoredeb=$(<$PREFDIR"debianRestore")
restorepref=$(<$PREFDIR"prefRestore")
restoremaster=$(<$PREFDIR"masterRestore")
clearlib=$(<$PREFDIR"clearLib")
clearstorage=$(<$PREFDIR"clearStorage")
unpack=$(<$PREFDIR"unpack")
deletebackup=$(<$PREFDIR"deleteBackup")
echo "Done."
echo "======================================"
echo "Press ctrl+c at anytime you want to cancel the process."
echo "======================================"
echo "How can I help you?"
echo "*: Disabled"
echo ""
if [ $backupdeb == "enable" ]; then
    echo "1. Backup all debs"
else
    echo "*1. Backup all debs"
fi
if [ $backuppref == "enable" ]; then
    echo "2. Backup preferences (Not include Apple Pref)"
else
    echo "2*. Backup preferences (Not include Apple Pref)"
fi
if [ $restorepref == "enable" ]; then
    echo "3. Restore preferences"
else
    echo "3*. Restore preferences"
fi
if [ $clearstorage == "enable" ]; then
    echo "4. Clean Temporary Storage"
else
    echo "4*. Clean Temporary Storage"
fi
if [ $restoredeb == "enable" ]; then
    echo "5. Restore deb backup"
else
    echo "5*. Restore deb backup"
fi
if [ $unpack == "enable" ]; then
    echo "6. Unpack backup"
else
    echo "6*. Unpack backup"
fi
if [ $deletebackup == "enable" ]; then
    echo "7. Delete old backups"
else
    echo "7*. Delete old backups"
fi
if [ $clearlib == "enable" ]; then
    echo "8. Clean DEBackup Library - Erase backups"
else
    echo "8*. Clean DEBackup Library - Erase backups"
fi
if [ $backupmaster == "enable" ]; then
    echo "9. Backup debs and preferences (Not include Apple Pref)"
else
    echo "9*. Backup debs and preferences (Not include Apple Pref)"
fi
if [ $restoremaster == "enable" ]; then 
    echo "10. Restore full backup"
else
    echo "10*. Restore full backup"
fi
echo "11. Quit"
echo "12. Credit"
echo ""
echo "Type in the valid option number."
read optionNum
if [ $optionNum == "1" ]; then
    if [ $backupdeb == "enable" ]; then
        $BINDIR"backupdeb"
    elif [ $backupdeb == "disable-wip" ]; then
        echo "Option is working in progress."
    else
        echo "Option is currently disabled."
    fi
elif [ $optionNum == "2" ]; then
    if [ $backuppref == "enable" ]; then
        $BINDIR"backuppref"
    elif [ $backuppref == "disable-wip" ]; then
        echo "Option is working in progress."
    else
        echo "Option is currently disabled."
    fi
elif [ $optionNum == "3" ]; then
    if [ $restorepref == "enable" ]; then
        $BINDIR"restorepref"
    elif [ $restorepref == "disable-wip" ]; then
        echo "Option is working in progress."
    else
        echo "Option is currently disabled."
    fi
elif [ $optionNum == "4" ]; then
    if [ $clearstorage == "enable" ]; then
        $BINDIR"cleanup"
    elif [ $clearstorage == "disable-wip" ]; then
        echo "Option is working in progress."
    else
        echo "Option is currently disabled."
    fi
elif [ $optionNum == "5" ]; then
    if [ $restoredeb == "enable" ]; then
        $BINDIR"restoredeb"
    elif [ $restoredeb == "disable-wip" ]; then
        echo "Option is working in progress."
    else
        echo "Option is currently disabled."
    fi
elif [ $optionNum == "6" ]; then
    if [ $unpack == "enable" ]; then
        $BINDIR"unpack"
    elif [ $unpack == "disable-wip" ]; then
        echo "Option is working in progress."
    else
        echo "Option is currently disabled."
    fi
elif [ $optionNum == "7" ]; then
    if [ $deletebackup == "enable" ]; then
        $BINDIR"delbackup"
    elif [ $deletebackup == "disable-wip" ]; then
        echo "Option is working in progress."
    else
        echo "Option is currently disabled."
    fi
elif [ $optionNum == "8" ]; then  
    if [ $clearlib == "enable" ]; then
        $BINDIR"cleanlib"
    elif [ $clearlib == "disable-wip" ]; then
        echo "Option is working in progress."
    else
        echo "Option is currently disabled."
    fi 
elif [ $optionNum == "9" ]; then
    if [ $backupmaster == "enable" ]; then
        $BINDIR"backupall"
    elif [ $backupmaster == "disable-wip" ]; then
        echo "Option is working in progress."
    else
        echo "Option is currently disabled."
    fi   
elif [ $optionNum == "10" ]; then 
    if [ $restoremaster == "enable" ]; then
        $BINDIR"restoreall"
    elif [ $restoremaster == "disable-wip" ]; then
        echo "Option is working in progress."
    else
        echo "Option is currently disabled."
    fi  
elif [ $optionNum == "11" ]; then   
    echo "Bye!"
elif [ $optionNum == "12" ]; then
    echo "Deb Extraction script: Redeb by T.Herak"
    echo "Tool: HTTP410GONE"
    echo "Publish: NVTechnology Korea"
else
    echo "No valid option. Exiting..."
fi
if [ -e $ProgressFile ]; then
    rm $ProgressFile
fi
