#!/bin/bash
# This script is created by HTTP410GONE.
# Twitter: @hypertexterr410
# Copyright (C) HTTP410GONE.
touch /System/Library/deback_permission_test
function trap_forceExit ()
{
    echo "Force quit signal detected."
    echo "Cleaning up..."
    if [ -e $INPROGRESS ]; then
        rm $INPROGRESS
    fi
    exit 
}
trap "trap_forceExit" 2
clear
DEBUG="Release "
VER=$(</private/var/mobile/lib410/VersionStore/vers_debackup)
echo " _   _  _                "               
echo "| \ |_ |_)  _.  _ |      ._   "
echo "|_/ |_ |_) (_| (_ |< |_| |_)  "
echo "                         |   "
echo "======================================"
echo "NO INTERACTION MODE"
echo "Version:" $DEBUG$VER
echo "Tool Created: HTTP410GONE"
echo "Tool Published: NVTechnology Korea"
echo "======================================"
echo "System Start..."
echo "Checking permission..."
if [ ! -e /System/Library/deback_permission_test ]; then
    echo "DEBackup is not running as superuser permission. Unable to continue."
    exit
else
    echo "Permission check pass!"
    rm /System/Library/deback_permission_test
fi
echo "Checking Library..."
if [ ! -e /private/var/mobile/Documents/debackup.lib ]; then
    echo "DEBackup Master Library not found. Making one..."
    mkdir /private/var/mobile/Documents/debackup.lib
    echo "Making child libraries..."
    mkdir /private/var/mobile/Documents/debackup.lib/Permanent
    mkdir /private/var/mobile/Documents/debackup.lib/temp
    echo "Done."
elif [ ! -e /private/var/mobile/Documents/debackup.lib/temp ]; then
    echo "DEBackup Temporary Directory not found. Making one..." 
    mkdir /private/var/mobile/Documents/debackup.lib/temp
    echo "Done."
elif [ ! -e /private/var/mobile/Documents/debackup.lib/Permanent ]; then
    echo "DEBackup Permanent Storage not found. Making one..."
    mkdir /private/var/mobile/Documents/debackup.lib/Permanent
    echo "Done."
fi
MASTERPATH="/private/var/mobile/Documents/debackup.lib"
PERMASTORE="/private/var/mobile/Documents/debackup.lib/Permanent"
TEMP="/private/var/mobile/Documents/debackup.lib/temp"
INPROGRESS="/private/var/mobile/Documents/debackup.lib/inProgress"
echo "Checking for any crash..."
if [ -e $INPROGRESS ]; then
    RECORD=$(<$INPROGRESS)
    echo "CRASH RECORD FOUND."
    echo "DATA: "
    echo $RECORD
    rm $INPROGRESS
    echo "Crash data erased. Just in case, please restart the tool."
    echo "======================================"
    exit
else
    echo "No crash record from last process."
fi
echo "======================================"
echo "Press ctrl+c at anytime you want to cancel the process."
echo "======================================"
optionNum=$1
if [ $optionNum == "help" ]; then
    echo "-backupDeb"
    echo "-backupPref"
    echo "-backupFull"
    echo "-restoreDeb"
    echo "-restorePref"
    echo "-restoreFull"
    echo "-cleanlib"
    echo "-cleantemppath"
fi
if [ $optionNum == "-backupDeb" ]; then
    echo "======================================"
    echo "You are trying to backup all the debs."
    echo "It may take very long, and it depends"
    echo "the number of debs installed and the "
    echo "speed of your device."
    echo "======================================"
    echo "What will the backup name be?"
    backupname=$2
    echo "PROCESS: backupDebsOnly-getlist / BACKUP_NAME: "$backupname > $INPROGRESS
    echo "1/5: Accessing dpkg to get the list..."
    total=$(dpkg --get-selections | awk '{print $1}'|grep -v gsc|grep -v "^cy+" | wc -l)
    echo "     Found " $total " debs to backup."
    echo "2/5: Extract to DEB"
    echo "PROCESS: backupDebsOnly-extraction / BACKUP_NAME: "$backupname > $INPROGRESS
     
    declare -i division_part1=total/3
    declare -i division_part2=total/3*2
    echo "Extraction: 0/3"
    for ((i=0; i<total; i++)) do
        ( echo y
        echo $i
         ) | /usr/bin/debackup-extractionTool >&- 2>&-
        if [ i==division_part1 ]; then
            echo "Extraction: 1/3"
        elif [ i== division_part2 ]; then
            echo "Extraction: 2/3"
        fi
    done
    echo "Extraction: 3/3"

    #for ((i=0; i<total; i++)) do
    #    ( echo y
    #    echo $i
    #     ) | /usr/bin/debackup-extractionTool >&- 2>&-
    #    echo "Progress: "$i"/"$total
    #done
    #echo "Progress: "$total"/"$total
    cd $TEMP
    if [ $DEBUG == "DEBUG_" ]; then
        echo "Backed up list:"
        ls
    fi
    echo "3/5: Removing Stock Packages from backup..."
    echo "PROCESS: backupDebsOnly-eraseStockPackages / BACKUP_NAME: "$backupname > $INPROGRESS
    if [ $DEBUG == "DEBUG_" ]; then
        echo "Currently Working:" $(pwd)
        echo "  Erase list: com.ex.substitute, apt7, apt7-key, apt7-lib, base, bash, bzip2, coreutils, coreutils-lib, cydia, {All saurik packages}"
    fi
    rm com.ex.substitute*
    rm apt7*
    rm base*
    rm bash*
    rm bzip2*
    rm coreutils*
    rm cydia*
    rm com.saurik*
    cd $MASTERPATH
    echo "4/5: Archiving..."
    echo "PROCESS: backupDebsOnly-archive / BACKUP_NAME: "$backupname > $INPROGRESS
    sleep 2
    if [ $DEBUG == "DEBUG_" ]; then
        echo "Currently Working:" $(pwd)
    fi
    zip -rqq BACKUP_$backupname.zip temp
    mv BACKUP_$backupname.zip $PERMASTORE/BACKUP_$backupname.dbk
    echo "5/5: Cleaning up..."
    echo "PROCESS: backupDebsOnly-cleanup / BACKUP_NAME: "$backupname > $INPROGRESS
    if [ $DEBUG == "DEBUG_" ]; then
        echo "Files were not cleaned up because the snapshot is debug version."
    elif [ $DEBUG == "Release " ]; then
        rm -r $TEMP
        mkdir $TEMP
    fi
    echo "Done."
elif [ $optionNum == "-backupPref" ]; then
    echo "What will the backup name be?"
    backupname=$2
    echo "PROCESS: backupPrefOnly-copyPrefFile / BACKUP_NAME: "$backupname > $INPROGRESS
    rm -r $TEMP
    mkdir $TEMP
    echo "1/3: Copying preference files..."
    cp -r /private/var/mobile/Library/Preferences $TEMP
    echo "PROCESS: backupPrefOnly-filterApplePreferenceFiles / BACKUP_NAME: "$backupname > $INPROGRESS
    echo "2/3: Filtering..."
    rm com.apple.*
    echo "PROCESS: backupPrefOnly-compress / BACKUP_NAME: "$backupname > $INPROGRESS
    cd $TEMP
    cd ..
    echo "3/3: Archiving..."
    zip -rqq BACKUP_$backupname.zip Temporary
    mv BACKUP_$backupname.zip $PERMASTORE/BACKUP_$backupname.pbk
    rm -r $TEMP
    mkdir $TEMP
    echo "Done."
elif [ $optionNum == "-restorePref" ]; then
    echo "PROCESS: restorePref-temporary"> $INPROGRESS
    echo "What backup do you want to restore? (Type the backup name only.)"
    cd $PERMASTORE
    ls *.pbk
    read backupSelection
    echo "PROCESS: restorePref-copyBackupToTemporaryStorage / BACKUP_NAME: "$backupSelection > $INPROGRESS
    cp "BACKUP_"$backupSelection".pbk" $TEMP
    mv $TEMP/"BACKUP_"$backupSelection".pbk" $TEMP/backup.zip
    echo "1/3: Unpacking backup..."
    echo "PROCESS: restorPrefe-unpack / BACKUP_NAME: "$backupSelection > $INPROGRESS
    sleep 2
    cd $TEMP
    if [ $DEBUG == "DEBUG_" ]; then
        echo "Currently Working:" $(pwd)
    fi
    unzip -qq backup.zip
    cd $TEMP
    echo "2/3: Copying contents..."
    echo "PROCESS: restorePref-copyFiles / BACKUP_NAME: "$backupSelection > $INPROGRESS
    cp * /private/var/mobile/Library/Preferences
    echo "3/3: Cleaning up..."
    echo "PROCESS: restorePref-copyFiles / BACKUP_NAME: "$backupSelection > $INPROGRESS
    rm -r $TEMP
    mkdir $TEMP
elif [ $optionNum == "-cleantemppath" ]; then
    echo "PROCESS: clean-temporary"> $INPROGRESS
    rm -r $TEMP
    mkdir $TEMP
    echo "Done."
elif [ $optionNum == "-restoreDeb" ]; then
    echo "======================================"
    echo "You are trying to restore from a backup."
    echo "It may take very long, and it depends"
    echo "the contents of the backup and the"
    echo "speed of your device."
    echo "======================================"
    echo "What backup do you want to restore? (Type the backup name only.)"
    cd $PERMASTORE
    ls *.dbk
    read backupSelection
    echo "PROCESS: restoreDebOnly-copyBackupToTemporaryStorage / BACKUP_NAME: "$backupSelection > $INPROGRESS
    cp "BACKUP_"$backupSelection".dbk" $TEMP
    mv $TEMP/"BACKUP_"$backupSelection".dbk" $TEMP/backup.zip
    echo "1/4: Unpacking backup..."
    echo "PROCESS: restoreDebOnly-unpack / BACKUP_NAME: "$backupSelection > $INPROGRESS
    sleep 2
    cd $TEMP
    if [ $DEBUG == "DEBUG_" ]; then
        echo "Currently Working:" $(pwd)
    fi
    unzip -qq backup.zip
    cd $TEMP
    echo "2/4: Starting installation using DPKG..."
    echo "PROCESS: restoreDebOnly-installUsingDPKG / BACKUP_NAME: "$backupSelection > $INPROGRESS
    sleep 1
    dpkg -i *.deb >&- 2>&-
    echo "3/4: Cleaning up..."
    echo "PROCESS: restoreDebOnly-cleanup / BACKUP_NAME: "$backupSelection > $INPROGRESS
    rm -r $TEMP
    mkdir $TEMP
    echo "4/4: Running uicache..."
    echo "PROCESS: restoreDebOnly-runUicache / BACKUP_NAME: "$backupSelection > $INPROGRESS
    uicache
    echo "Done."
    echo "SpringBoard will restart in 5 seconds."
    echo "PROCESS: restoreDebOnly-respringtimeout / BACKUP_NAME: "$backupSelection > $INPROGRESS
    sleep 5
    killall SpringBoard
elif [ $optionNum == "-cleanlib" ]; then   
    echo "======================================"
    echo "You are trying to delete the master library."
    echo "THIS WILL ERASE YOUR LOCAL BACKUPS."
    echo "YOU CANNOT UNDO THIS ACTION."
    echo "======================================"
    echo "1/1: Cleaning up library."
    echo "PROCESS: deletelib-delete" > $INPROGRESS
    rm -r $MASTERPATH
    echo "Done."
elif [ $optionNum == "-backupFull" ]; then   
    echo "======================================"
    echo "You are trying to backup all the debs"
    echo "and preference files."
    echo "It may take very long, and it depends"
    echo "the number of debs installed and the "
    echo "speed of your device."
    echo "======================================"
    echo "What will the backup name be?"
    backupname=$2
    echo "PROCESS: backupFull-getlist / BACKUP_NAME: "$backupname > $INPROGRESS
    echo "1/9: Accessing dpkg to get the list..."
    total=$(dpkg --get-selections | awk '{print $1}'|grep -v gsc|grep -v "^cy+" | wc -l)
    echo "     Found " $total " debs to backup."
    echo "2/9: Extract to DEB"
    echo "PROCESS: backupFull-extraction / BACKUP_NAME: "$backupname > $INPROGRESS
    declare -i division_part1=total/3
    declare -i division_part2=total/3*2
    echo "Extraction: 0/3"
    for ((i=0; i<total; i++)) do
        ( echo y
        echo $i
         ) | /usr/bin/debackup-extractionTool >&- 2>&-
        if [ i==division_part1 ]; then
            echo "Extraction: 1/3"
        elif [ i== division_part2 ]; then
            echo "Extraction: 2/3"
        fi
    done
    echo "Extraction: 3/3"
    cd $TEMP
    if [ $DEBUG == "DEBUG_" ]; then
        echo "Backed up list:"
        ls
    fi
    echo "3/9: Removing Stock Packages from backup..."
    echo "PROCESS: backupFull-eraseStockPackages / BACKUP_NAME: "$backupname > $INPROGRESS
    if [ $DEBUG == "DEBUG_" ]; then
        echo "Currently Working:" $(pwd)
        echo "  Erase list: com.ex.substitute, apt7, apt7-key, apt7-lib, base, bash, bzip2, coreutils, coreutils-lib, cydia, {All saurik packages}"
    fi
    cd temp
    rm com.ex.substitute*
    rm apt7*
    rm base*
    rm bash*
    rm bzip2*
    rm coreutils*
    rm cydia*
    rm com.saurik*
    cd $MASTERPATH
    echo "4/9: Archiving..."
    echo "PROCESS: backupFull-archive / BACKUP_NAME: "$backupname > $INPROGRESS
    sleep 2
    if [ $DEBUG == "DEBUG_" ]; then
        echo "Currently Working:" $(pwd)
    fi
    zip -rqq $backupname_debs.zip temp
    echo "5/9: Copying preference files..."
    echo "PROCESS: backupFull-copyPrefFile / BACKUP_NAME: "$backupname > $INPROGRESS
    mkdir $TEMP/preferences
    cp -r /private/var/mobile/Library/Preferences $TEMP/preferences
    echo "6/9: Filtering Apple preferences..."
    echo "PROCESS: backupFull-filterApplePreferenceFiles / BACKUP_NAME: "$backupname > $INPROGRESS
    cd preferences
    rm com.apple.*
    echo "7/9: Archiving..."
    echo "PROCESS: backupFull-compress / BACKUP_NAME: "$backupname > $INPROGRESS
    cd $TEMP
    zip -rqq $backupname_prefs.zip preferences
    echo "8/9: Binding..."
    echo "PROCESS: backupFull-bind / BACKUP_NAME: "$backupname > $INPROGRESS
    mkdir Contents
    mv $backupname"_debs.dbk" "Contents/"$backupname"_debs.dbk"
    mv $backupname"_prefs.zip" "Contents/"$backupname"_prefs.pbk"
    zip -rqq BACKUP_$backupname.zip Contents
    mv BACKUP_$backupname.zip BACKUP_$backupname.mbk
    mv BACKUP_$backupname.mbk $PERMASTORE/BACKUP_$backupname.mbk
    echo "9/9: Cleaing up..."
    echo "PROCESS: backupFull-cleanup / BACKUP_NAME: "$backupname > $INPROGRESS
    echo "Done."
elif [ $optionNum == "-restoreFull" ]; then   
    echo "======================================"
    echo "You are trying to restore from a backup."
    echo "It may take very long, and it depends"
    echo "the contents of the backup and the"
    echo "speed of your device."
    echo "======================================"
    echo "What backup do you want to restore? (Type the backup name only.)"
    cd $PERMASTORE
    ls *.mbk
    read backupSelection
    echo "1/9: Copying files to temporary directory..."
    echo "PROCESS: restoreMasterBackup-copyBackupToTemporaryStorage / BACKUP_NAME: "$backupSelection > $INPROGRESS
    cp "BACKUP_"$backupSelection".mbk" $TEMP
    mv $TEMP/"BACKUP_"$backupSelection".mbk" $TEMP/backup.zip
    echo "2/9: Unpacking backup..."
    echo "PROCESS: restoreMasterBackup-unpack / BACKUP_NAME: "$backupSelection > $INPROGRESS
    sleep 2
    cd $TEMP
    if [ $DEBUG == "DEBUG_" ]; then
        echo "Currently Working:" $(pwd)
    fi
    unzip -qq backup.zip
    cd $TEMP
    cd Contents
    mv *.dbk debian.zip
    mv *.pbk pref.zip
    echo "3/9: Unpacking preferences..."
    unzip -qq pref.zip
    echo "4/9: Overwriting preferece files..."
    cd prefereces
    cp * /private/var/mobile/Library/Preferences
    echo "5/9: Cleaning up preference files..."
    cd ..
    rm -r preferences
    echo "6/9: Unpacking Deb backups..."
    unzip -qq debian.zip
    cd temp
    echo "7/9: Installing packages with DPKG..."
    dpkg -i *.deb >&- 2>&-
    echo "8/9: Cleaning up deb files..."
    cd ..
    rm -r temp
    echo "9/9: Cleaning up temporary space..."
    cd $MASTERPATH
    rm -r $TEMP
    mkdir $TEMP
else
    echo "No valid option. Exiting..."
fi
if [ -e $INPROGRESS ]; then
    rm $INPROGRESS
fi
